#!/usr/bin/python3
"""CentralNotice changes monitor
Code layout notes: This script sets up and parses command-line arguments, gets
configuration from the config module, and calls the public controller function. No other
code in this library should deal directly with command-line arguments or config.

Notes on some modules:
controller       Manages process from a high level and keeps all global state (other than
                 setup information).
wiki_api         Handles all calls to the wiki's public web-based API.
page_manager     Handles all database interactions and provides methods for working with
                 pages.
"""

import argparse

from centralnotice_changes_monitor import config, setup_logging, controller


# Only run as command-line script
if __name__ == '__main__':

    # Set up command-line arguments and help

    parser = argparse.ArgumentParser(
        description = """CentralNotice Changes Monitor. Use configurable alerts to
            monitor changes to banners and transcluded pages associated with active
            and upcoming CentralNotice campaigns. Stores the last revisions checked
            in a database. When re-started, checks changes in content since the last
            time it was run."""
    )

    parser.add_argument(
        '--config',
        help= """Configuration file to use. (Without this option, the script looks for a
            configuration file in the working directory and in
            /etc/centralnotice_changes_monitor.)"""
    )

    parser.add_argument(
        '--debug',
        help = 'Output debugging info to stderr.',
        action = 'store_true'
    )

    args = parser.parse_args()

    # Do stuff with options available to all commands
    config.filename = args.config # Will be None if the command-line option was not set
    cfg = config.get()

    setup_logging( args.debug )

    # Call the controller function to stream changes
    controller.monitor(
        db_settings = cfg[ 'db' ],
        wiki_api_settings = cfg.get( 'wiki', None ),
        kafka_settings = cfg[ 'kafka' ],
        alert_pattern_settings = cfg[ 'alert_patterns' ]
    )
